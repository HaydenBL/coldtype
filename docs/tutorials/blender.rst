Blender
=======

I'll admit, using Coldtype in Blender is not a very normal or standard application of Coldtype, but if you've ever tried to set text in Blender, you may understand why you'd never want to set text in Blender again using their typography GUI tools. Those tools are... bad. Worse-than-After-Effects bad. (Maybe not even any kerning if I remember correctly?)

Anyway the point is that you can avoid setting text in Blender itself by writing Python scripts that run inside Blender.

That is, the idea here is to work in a more hybrid style. You want a gigantic piece of 3d type that uses the second stylistic set of a font? Blender won't help you, but Coldtype can: write a short script in Python, using Coldtype to create the vector, and — voila — you have a gigantic piece of 3d type that you can move around and add materials to, etc.

__N.B.__ This means the point of a Coldtype script in Blender is not to return a ``DATPen`` or ``DATPens`` from a Coldtype rendering function, but to work interactively, creating or mutating existing objects available in the Blender data hierarchy in your project file.

__N.B.2__ Because Blender is the de-facto "renderer" in this situation, and because much of Coldtype’s codebase and dependencies are centered around rendering, it makes more sense to not use Coldtype in Blender, but to instead use __drafting__, a library that implements most of the core vector and text functionality of Coldtype.

Getting it all set up is a bit of a pain, but worth it (if you’re doing anything with typography in Blender).

Installing
----------

Installing packages in Blender requires locating the bundled python binary included with Blender itself. The path to this binary varies based on the version of Blender you have installed, but should look something like this:

.. code:: bash

    /Applications/Blender.app/Contents/Resources/2.92/python/bin/python3.7m

The ``2.90`` and the ``3.7m`` might be different depending on your installation.

On my computer, I’ve aliased that path to something I call `b3d_python`, so there’s a line like this in my `~/.bash_profile`:

.. code:: bash

    alias b3d_python='/Applications/Blender.app/Contents/Resources/2.90/python/bin/python3.7m'

I also have a line to address the Blender executable itself:

.. code:: bash

    alias b3d='/Applications/Blender.app/Contents/MacOS/blender'

This is useful because when you’re running Python scripts in Blender on Mac, you need to start Blender from the command-line, in order to see errors and logs generated by the Python. If you start Python from the GUI Application in your Applications folder, you'll be unable to see anything printed or thrown from your script.

Once you have all that out of the way, you can `pip install` things using that executable, like so:

.. code:: bash

    b3d -m pip install "drafting[text]"

Running Code in Blender
-----------------------

This code must be run from within Blender itself (see blender/README.md in this repo), using the "Text Editor" window, then run with the play button (aka ``alt+p``):

.. code:: python

    from drafting.blender import *

    BPH.Clear()

    r = Rect(0, 0, 1000, 1000)
    tc = BPH.Collection("Text")
    fnt = Font.Cacheable("~/Type/fonts/fonts/CheeeVariable.ttf")

    (DraftingPen(r)
        .f(hsl(0.9))
        .tag("Frame")
        .cast(BlenderPen)
        .draw(tc, plane=1))

    @b3d_animation(30)
    def draw_txt(f):
        (StSt("HEY", fnt, 500, yest=f.ie("qeio", 2), grvt=f.e(1))
            .pen()
            .align(r)
            .tag("HEY")
            .cast(BlenderPen)
            .draw(tc))

Running that code will add some objects to your scene — objects which you can move around and modify as much as you’d like — the goal here is not so much to craft a finished image with code, but to help you quickly and precisely get some good looking typographic vectors in your scene.

So some code like that should result (if you render it via Cycles) in an image similar to this:

.. image:: /_static/blender_hey2.gif
    :width: 540